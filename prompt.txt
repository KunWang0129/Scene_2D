
You are a Large Language Model expert at writing code for creating scene layouts. Write Python code to create a different scene layout based on the shapes defined in the API below.
To help you write the code, you should refer to the following APIs:
"""
Scene Setup:
- Axes: x (left to right), y (top to bottom).
- Dimensions: Configured upon scene initialization with width and height.
- Colors: Background color is set during scene initialization.
Create scene with scene = Scene(size=(WIDTH, HEIGHT), bg_color='COLOR'). Manage objects by their shape types such as 'circle1', 'rectangle2', etc.

API for Adding Shapes:
- scene.add_shape(shape): Add shapes to the scene. Supported shapes include Circle, Rectangle, Triangle.
- scene.remove_shape(shape): Remove a shape from the scene.

Shape Classes and Initialization:
- Circle(radius, color='black', rotation=0): Initialize a circle with radius, color, and rotation.
- Rectangle(width, height, color='black', rotation=0): Initialize a rectangle with width, height, color, and rotation.
- Triangle(size, color='black', rotation=0): Initialize a triangle with side size, color, and rotation.

Shape Positioning:
- shape.place_shape_global(position): Set global position of the shape.
- shape.place_shape_local(reference_shape, position, offset): Position the shape relative to another shape (positions include 'left', 'right', 'above', 'below').

Rendering and Visual Setup:
- scene.create_background(): Creates a background image for the scene.
- scene.render(filename='scene.png'): Renders the entire scene to an image file with specified filename.
- Draw functions for each shape are internal methods used during the rendering process to depict shapes on the canvas.

Object Access and Manipulation:
- Direct scene.shapes for accessing list of shapes.
- Properties for shapes include color, position, and rotation.
- Methods for moving and rotating shapes are provided to adjust their positions and orientations within the scene.

The general structure of the program is as follows:
1. Initialize scene with dimensions.
2. Add shapes (circles, rectangles, triangles)
3. Place objects in the scene.

Note: Make sure you follow the above APIs, and structure of the program and add necessary amount of objects to make it look full. 
"""
You are required to write Python code to create a scene layout based on the shapes defined in the API above. The scene should be full and complete, with all the shapes placed in a way that makes the scene look full. Make sure you follow the APIs and structure of the program and add the necessary amount of objects to make it look full.Here is the full implementation of the API for your reference: 
from PIL import Image, ImageDraw
from utils.Shape import Circle, Rectangle, Triangle


class Scene:
    """
    This class represents a scene where shapes can be added, removed, and rendered into an image.

    Attributes:
    size (tuple): The size of the scene as a tuple of width and height.
    bg_color (str): The background color of the scene.
    shapes (list): A list of shapes added to the scene.
    """

    def __init__(self, size=(800, 600), bg_color="white"):
        """
        This is a constructor for the Scene class.

        Parameters:
        size (tuple, optional): The size of the scene as a tuple of width and height. Defaults to (800, 600).
        bg_color (str, optional): The background color of the scene. Defaults to 'white'.
        """
        self.size = size
        self.bg_color = bg_color
        self.shapes = []

    def add_shape(self, shape):
        """
        This method adds a shape to the scene.

        Parameters:
        shape (Shape): The shape to be added to the scene.

        Returns:
        None
        """
        self.shapes.append(shape)

    def remove_shape(self, shape):
        """
        This method removes a shape from the scene.

        Parameters:
        shape (Shape): The shape to be removed from the scene.

        Returns:
        None
        """
        self.shapes.remove(shape)

    def create_background(self):
        """
        This method creates a new image with the size and background color of the scene.

        Returns:
        Image: A new image with the size and background color of the scene.
        """
        return Image.new("RGB", self.size, self.bg_color)

    def render(self, filename="scene.png"):
        """
        This method renders the scene into an image file.

        Parameters:
        filename (str, optional): The name of the image file. Defaults to 'scene.png'.

        Returns:
        None
        """
        image = self.create_background()
        draw = ImageDraw.Draw(image)

        for shape in self.shapes:
            if isinstance(shape, Circle):
                self.draw_circle(draw, shape)
            elif isinstance(shape, Rectangle):
                self.draw_rectangle(draw, shape)
            elif isinstance(shape, Triangle):
                self.draw_triangle(draw, shape)

        image.save(filename)

    def draw_circle(self, draw, circle):
        """
        This method draws a circle on the scene.

        Parameters:
        draw (ImageDraw.Draw): The drawing context.
        circle (Circle): The circle to be drawn.

        Returns:
        None
        """
        left_up = (
            circle.position[0] - circle.radius,
            circle.position[1] - circle.radius,
        )
        right_down = (
            circle.position[0] + circle.radius,
            circle.position[1] + circle.radius,
        )
        draw.ellipse([left_up, right_down], outline=circle.color, fill=circle.color)

    def draw_rectangle(self, draw, rectangle):
        """
        This method draws a rectangle on the scene.

        Parameters:
        draw (ImageDraw.Draw): The drawing context.
        rectangle (Rectangle): The rectangle to be drawn.

        Returns:
        None
        """
        cx, cy = rectangle.position
        width, height = rectangle.width, rectangle.height
        # Calculate half of the width and height
        half_width, half_height = width / 2, height / 2

        # Calculate the coordinates of the rectangle (non-rotated) from the center
        coords = [
            cx - half_width,
            cy - half_height,  # Top-left
            cx + half_width,
            cy - half_height,  # Top-right
            cx + half_width,
            cy + half_height,  # Bottom-right
            cx - half_width,
            cy + half_height,  # Bottom-left
        ]

        if rectangle.rotation != 0:
            # If rotation is applied, calculate the new coordinates
            coords = self.rotate_coords(coords, rectangle.rotation, (cx, cy))

        draw.polygon(coords, outline=rectangle.color, fill=rectangle.color)

    def draw_triangle(self, draw, triangle):
        cx, cy = triangle.position
        size = triangle.size

        # Assuming an equilateral triangle, calculate the initial coordinates
        height = size * (3**0.5) / 2  # Height of equilateral triangle
        coords = [
            (cx, cy - 2 / 3 * height),  # Top vertex
            (cx - size / 2, cy + 1 / 3 * height),  # Bottom left vertex
            (cx + size / 2, cy + 1 / 3 * height),  # Bottom right vertex
        ]

        if triangle.rotation != 0:
            # Convert list of tuples to a flat list for rotation
            flat_coords = [coord for point in coords for coord in point]
            # If rotation is applied, calculate the new coordinates
            flat_coords = self.rotate_coords(flat_coords, triangle.rotation, (cx, cy))
            # Convert flat list back to list of tuples
            coords = [
                (flat_coords[i], flat_coords[i + 1])
                for i in range(0, len(flat_coords), 2)
            ]

        # Draw the triangle using the polygon method with three points
        draw.polygon(coords, outline=triangle.color, fill=triangle.color)

    def rotate_coords(self, coords, angle, center):
        """
        This method rotates a set of coordinates around a center point.

        Parameters:
        cx (float): The x-coordinate of the center point.
        cy (float): The y-coordinate of the center point.
        coords (list): A list of tuples representing the coordinates to be rotated.
        angle (float): The angle of rotation in degrees.

        Returns:
        list: A list of tuples representing the rotated coordinates.
        """
        from math import radians, sin, cos

        angle = radians(
            -angle
        )  # Convert angle from degrees to radians, negate for clockwise rotation
        cx, cy = center
        new_coords = []

        # Assuming coords is a flat list [x0, y0, x1, y1, ..., xn, yn]
        for i in range(0, len(coords), 2):
            x, y = coords[i], coords[i + 1]
            # Translate point to origin
            temp_x, temp_y = x - cx, y - cy
            # Rotate point
            rotated_x = temp_x * cos(angle) - temp_y * sin(angle)
            rotated_y = temp_x * sin(angle) + temp_y * cos(angle)
            # Translate point back
            new_x, new_y = rotated_x + cx, rotated_y + cy
            new_coords.extend([new_x, new_y])

        return new_coords
class Shape:
    def __init__(self, color="black", rotation=0):
        self.position = (0, 0)
        self.color = color
        self.rotation = rotation  # Rotation in degrees

    def place_shape_global(self, position):
        """
        This method places the shape at a global position specified by the 'position' parameter.

        Parameters:
        position (tuple): A tuple containing the x and y coordinates where the shape will be placed.

        Returns:
        None
        """
        self.position = position
        return None

    def place_shape_local(self, reference_shape, position, offset=(0, 0)):
        """
        Place the shape relative to a reference shape's position.

        This method positions the shape based on a given reference shape and a specified position relative to that reference shape. The shape can be placed to the left, right, above, or below the reference shape. An optional offset can be applied to the final position.

        Parameters:
        reference_shape : Shape
            The shape to use as the reference for positioning. It must have `position` and `dimension` attributes.
        position : str
            The desired position relative to the reference shape. It can be one of the following:
            - "left": to place the shape to the left of the reference shape.
            - "right": to place the shape to the right of the reference shape.
            - "above": to place the shape above the reference shape.
            - "below": to place the shape below the reference shape.
        offset : tuple of int, optional
            A tuple (x_offset, y_offset) that specifies additional offset to apply to the final position.
            The default value is (0, 0).

        Returns:
        None
        """
        ref_x, ref_y = reference_shape.position
        offset_x = (self.dimension[0] + reference_shape.dimension[0]) // 2
        offset_y = (self.dimension[1] + reference_shape.dimension[1]) // 2

        if position == "left":
            new_x = ref_x - offset_x
            new_y = ref_y
        elif position == "right":
            new_x = ref_x + offset_x
            new_y = ref_y
        elif position == "above":
            new_y = ref_y - offset_y
            new_x = ref_x
        elif position == "below":
            new_y = ref_y + offset_y
            new_x = ref_x

        new_x += offset[0]
        new_y += offset[1]
        self.place_shape_global((new_x, new_y))


class Circle(Shape):
    def __init__(self, radius, color="black", rotation=0):
        """
        This is a constructor for the Circle class which inherits from the Shape class.

        Parameters:
        radius (float): The radius of the circle.
        color (str, optional): The color of the circle. Defaults to 'black'.
        rotation (int, optional): The rotation of the circle in degrees. Defaults to 0.
        """
        super().__init__(color, rotation)
        self.radius = radius
        self.dimension = (radius * 2, radius * 2)


class Rectangle(Shape):
    def __init__(self, width, height, color="black", rotation=0):
        """
        This is a constructor for the Rectangle class which inherits from the Shape class.

        Parameters:
        width (float): The width of the rectangle.
        height (float): The height of the rectangle.
        color (str, optional): The color of the rectangle. Defaults to 'black'.
        rotation (int, optional): The rotation of the rectangle in degrees. Defaults to 0.
        """
        super().__init__(color, rotation)
        self.width = width
        self.height = height
        self.dimension = (width, height)


class Triangle(Shape):
    def __init__(self, size, color="black", rotation=0):
        """
        This is a constructor for the Triangle class which inherits from the Shape class.

        Parameters:
        size (float): The size of the triangle, which is used as the length of its sides.
        color (str, optional): The color of the triangle. Defaults to 'black'.
        rotation (int, optional): The rotation of the triangle in degrees. Defaults to 0.
        """
        super().__init__(color, rotation)
        self.size = size
        self.dimension = (size, size)
        # self.height = size * (3 ** 0.5) / 2

User Input: 
Create a scene with with the following drawing steps: 
1. A rectangle is placed in the center of the scene (car body).
2. Two smaller rectangles are placed on the top of the car body (windows).
3. Two circles are placed on the bottom of the car body (wheels).
4. A smaller rectangle is placed at the front of the car body (front bumper).
5. Another smaller rectangle is placed at the back of the car body (rear bumper). 
Your Response: 
