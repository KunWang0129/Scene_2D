Write Python code to create a scene layout based on the shapes defined in the API below.
To write the code, you should refer to the following API:
"""
Scene Setup:
- Axes: x (left to right), y (top to bottom).
- Dimensions: Configured upon scene initialization with width and height.
- Colors: Background color is set during scene initialization.
Create scene with scene = Scene(size=(WIDTH, HEIGHT), bg_color='COLOR'). Manage objects by their shape types such as 'circle1', 'rectangle2', etc.
 
API for Adding Shapes:
- scene.add_shape(shape): Add shapes to the scene. Supported shapes include Circle, Rectangle, Triangle.
 
Shape Classes and Initialization:
- Circle(radius, color='black'): Initialize a circle with radius, color.
- Rectangle(width, height, color='black'): Initialize a rectangle with width, height, color.
- Triangle(size, color='black'): Initialize a triangle with side size, color.
 
Shape Positioning:
- shape.place_shape_global(position): Set global position of the shape.
- shape.place_shape_local(reference_shape, position, offset): Position the shape relative to another shape (position can be 'left', 'right', 'above', 'below', 'center').
 
Rendering and Visual Setup:
- scene.render(filename='scene.png'): Renders the entire scene to an image file with specified filename.
- Draw functions for each shape are internal methods used during the rendering process to depict shapes on the canvas.
 
Object Access and Manipulation:
- Direct scene.shapes for accessing list of shapes.
- Properties for shapes include color, position.
- Methods for moving is provided to adjust their positions and orientations within the scene.
 
The general structure of the program is as follows:
1. Initialize scene with dimensions.
2. Add shapes (circles, rectangles, triangles)
3. Place objects in the scene.
 
Note: Make sure you follow the above APIs, and structure of the program and add necessary amount of objects to make it look full. 
"""
Here is the full implementation of the API for your reference:
from PIL import Image, ImageDraw
from utils.Shape import Circle, Rectangle, Triangle

class Scene:
    """
    This class represents a scene where shapes can be added, removed, and rendered into an image.

    Attributes:
    size (tuple): The size of the scene as a tuple of width and height.
    bg_color (str): The background color of the scene.
    shapes (list): A list of shapes added to the scene.
    """

    def __init__(self, size=(800, 600), bg_color="white"):
        """
        This is a constructor for the Scene class.

        Parameters:
        size (tuple, optional): The size of the scene as a tuple of width and height. Defaults to (800, 600).
        bg_color (str, optional): The background color of the scene. Defaults to 'white'.
        """
        self.size = size
        self.bg_color = bg_color
        self.shapes = []

    def add_shape(self, shape):
        """
        This method adds a shape to the scene.

        Parameters:
        shape (Shape): The shape to be added to the scene.

        Returns:
        None
        """
        self.shapes.append(shape)

    def render(self, filename="scene.png"):
        """
        This method renders the scene into an image file.

        Parameters:
        filename (str, optional): The name of the image file. Defaults to 'scene.png'.

        Returns:
        None
        """
        image = Image.new("RGB", self.size, self.bg_color)
        draw = ImageDraw.Draw(image)

        for shape in self.shapes:
            if isinstance(shape, Circle):
                self.draw_circle(draw, shape)
            elif isinstance(shape, Rectangle):
                self.draw_rectangle(draw, shape)
            elif isinstance(shape, Triangle):
                self.draw_triangle(draw, shape)

        image.save(filename)

    def draw_circle(self, draw, circle):
        """
        This method draws a circle on the scene.

        Parameters:
        draw (ImageDraw.Draw): The drawing context.
        circle (Circle): The circle to be drawn.

        Returns:
        None
        """
        left_up = (
            circle.position[0] - circle.radius,
            circle.position[1] - circle.radius,
        )
        right_down = (
            circle.position[0] + circle.radius,
            circle.position[1] + circle.radius,
        )
        draw.ellipse([left_up, right_down], outline=circle.color, fill=circle.color)

    def draw_rectangle(self, draw, rectangle):
        """
        This method draws a rectangle on the scene.

        Parameters:
        draw (ImageDraw.Draw): The drawing context.
        rectangle (Rectangle): The rectangle to be drawn.

        Returns:
        None
        """
        cx, cy = rectangle.position
        width, height = rectangle.width, rectangle.height
        # Calculate half of the width and height
        half_width, half_height = width / 2, height / 2

        # Calculate the coordinates of the rectangle from the center
        coords = [
            cx - half_width,
            cy - half_height,  # Top-left
            cx + half_width,
            cy - half_height,  # Top-right
            cx + half_width,
            cy + half_height,  # Bottom-right
            cx - half_width,
            cy + half_height,  # Bottom-left
        ]

        draw.polygon(coords, outline=rectangle.color, fill=rectangle.color)

    def draw_triangle(self, draw, triangle):
        cx, cy = triangle.position
        size = triangle.size

        # Assuming an equilateral triangle, calculate the initial coordinates
        height = size * (3**0.5) / 2  # Height of equilateral triangle
        coords = [
            (cx, cy - 2 / 3 * height),  # Top vertex
            (cx - size / 2, cy + 1 / 3 * height),  # Bottom left vertex
            (cx + size / 2, cy + 1 / 3 * height),  # Bottom right vertex
        ]

        # Draw the triangle using the polygon method with three points
        draw.polygon(coords, outline=triangle.color, fill=triangle.color)class Shape:
    def __init__(self, color="black"):
        self.position = (0, 0)
        self.color = color

    def place_shape_global(self, position):
        """
        This method places the shape at a global position specified by the 'position' parameter.

        Parameters:
        position (tuple): A tuple containing the x and y coordinates where the shape will be placed.

        Returns:
        None
        """

        self.position = position
        return None

    def place_shape_local(self, reference_shape, position, offset=(0, 0)):
        """
        Place the shape adjacent to a reference shape.

        Parameters:
        reference_shape : Shape
            The shape to use as the reference for positioning.
        position : str
            The desired position adjacent to the reference shape. Can only be one of: "left", "right", "above", "below", "center".
        offset : tuple of int, optional
            A tuple (x_offset, y_offset) that specifies additional offset to apply to the final position.
            A positive x value moves the shape to the right, a negative x value moves the shape to the left.
            A positive y value moves the shape down, a negative y value moves the shape up.

        Returns:
        None
        """

        ref_x, ref_y = reference_shape.position

        self_dim = self.dimension
        ref_dim = reference_shape.dimension
        # TODO: replace with simpler code
        if self.__class__.__name__ == "Triangle":
            if position == "above":
                self_dim = (self_dim[0], self_dim[1]/(3**0.5))
            elif position == "below":
                self_dim = (self_dim[0], 2*self_dim[1]/(3**0.5))
        if reference_shape.__class__.__name__ == "Triangle":
            if position == "above":
                ref_dim = (ref_dim[0], 2*ref_dim[1]/(3**0.5))
            elif position == "below":
                ref_dim = (ref_dim[0], ref_dim[1]/(3**0.5))
        
        offset_x = (self_dim[0] + ref_dim[0]) // 2
        offset_y = (self_dim[1] + ref_dim[1]) // 2

        if position == "left":
            new_x = ref_x - offset_x
            new_y = ref_y
        elif position == "right":
            new_x = ref_x + offset_x
            new_y = ref_y
        elif position == "above":
            new_y = ref_y - offset_y
            new_x = ref_x
        elif position == "below":
            new_y = ref_y + offset_y
            new_x = ref_x
        elif position == "center":
            new_x = ref_x
            new_y = ref_y

        new_x += offset[0]
        new_y += offset[1]
        self.place_shape_global((new_x, new_y))


class Circle(Shape):
    def __init__(self, radius, color="black"):
        """
        This is a constructor for the Circle class which inherits from the Shape class.

        Parameters:
        radius (float): The radius of the circle.
        color (str, optional): The color of the circle. Defaults to 'black'.
        """
        super().__init__(color)
        self.radius = radius
        self.dimension = (radius * 2, radius * 2)


class Rectangle(Shape):
    def __init__(self, width, height, color="black"):
        """
        This is a constructor for the Rectangle class which inherits from the Shape class.

        Parameters:
        width (float): The width of the rectangle.
        height (float): The height of the rectangle.
        color (str, optional): The color of the rectangle. Defaults to 'black'.
        """
        super().__init__(color)
        self.width = width
        self.height = height
        self.dimension = (width, height)


class Triangle(Shape):
    def __init__(self, size, color="black"):
        """
        This is a constructor for the Triangle class which inherits from the Shape class.

        Parameters:
        size (float): The size of the triangle, which is used as the length of its sides.
        color (str, optional): The color of the triangle. Defaults to 'black'.
        rotation (int, optional): The rotation of the triangle in degrees. Defaults to 0.
        """
        super().__init__(color)
        self.size = size
        self.dimension = (size, size)
Following are a few simple examples of how to write code in your response:



# Import necessary classes from the provided API
from utils.Shape import Circle, Rectangle, Triangle
from utils.Scene import Scene

# Initialize the scene with dimensions and background color
scene = Scene(size=(800, 600), bg_color='skyblue')

# Create the sun
sun = Circle(radius=100, color='yellow')
sun.place_shape_global((650, 150))
scene.add_shape(sun)

# Create the clouds
# Large cloud in the upper-left
cloud1 = Circle(radius=120, color='white')
cloud1.place_shape_global((200, 150))
scene.add_shape(cloud1)

# Medium cloud in the upper-center
cloud2 = Circle(radius=100, color='white')
cloud2.place_shape_global((400, 200))
scene.add_shape(cloud2)

# Small cloud in the upper-right, to the left of the sun
cloud3 = Circle(radius=80, color='white')
cloud3.place_shape_global((550, 150))
scene.add_shape(cloud3)

# Medium cloud in the center-left
cloud4 = Circle(radius=90, color='white')
cloud4.place_shape_global((200, 300))
scene.add_shape(cloud4)

# Two small clouds in the lower-right
cloud5 = Circle(radius=70, color='white')
cloud5.place_shape_global((600, 450))
scene.add_shape(cloud5)

cloud6 = Circle(radius=60, color='white')
cloud6.place_shape_global((700, 500))
scene.add_shape(cloud6)

# Render the scene
scene.render('scene.png')
scene.render(filename='output.png')
scene.render(filename='output.png')



# Import necessary classes from the provided API
from utils.Shape import Circle, Rectangle, Triangle
from utils.Scene import Scene

# Initialize the scene with dimensions and background color
scene = Scene(size=(800, 600), bg_color='skyblue')

# Create the sky
sky = Rectangle(width=800, height=600, color='lightblue')
sky.place_shape_global((400, 300))
scene.add_shape(sky)

# Create the clouds
cloud1 = Circle(radius=50, color='white')
cloud1.place_shape_global((100, 150))
scene.add_shape(cloud1)

cloud2 = Circle(radius=70, color='white')
cloud2.place_shape_global((550, 100))
scene.add_shape(cloud2)

cloud3 = Circle(radius=60, color='white')
cloud3.place_shape_global((300, 250))
scene.add_shape(cloud3)

cloud4 = Circle(radius=40, color='white')
cloud4.place_shape_global((650, 350))
scene.add_shape(cloud4)

cloud5 = Circle(radius=45, color='white')
cloud5.place_shape_global((200, 400))
scene.add_shape(cloud5)

cloud6 = Circle(radius=55, color='white')
cloud6.place_shape_global((450, 450))
scene.add_shape(cloud6)

# Render the scene
scene.render('scene.png')
scene.render(filename='output.png')

Now write code to Create a scene with a sailing boat on the sea in a sunny day:.
You should follow these drawing steps:
1. A large blue rectangle is placed in the center of the scene, representing the sea (sea).
2. A smaller light blue rectangle is placed at the top of the scene, representing the sky (sky).
3. A white irregular polygon is placed in the center of the sea, representing the sailing boat (sailing boat).
4. A triangular shape in shades of gray is placed at the top of the sailing boat, representing the sail (sail).
5. Two small brown rectangles are placed at the bottom of the sailing boat, representing the hull (hull).
6. A small yellow circle is placed in the top right corner of the scene, representing the sun (sun).
7. Several small white irregular shapes are placed on the sea, representing waves (waves).
8. A thin brown rectangle is placed at the bottom of the sailing boat, representing the mast (mast).
